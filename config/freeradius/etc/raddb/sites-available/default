server default {

listen {
	
	type = auth

	ipaddr = *

	port = 0

	limit {
	      
	      max_connections = 16

	      lifetime = 0

	      idle_timeout = 30
	}
}

listen {
	ipaddr = *
#	ipv6addr = ::
	port = 0
	type = acct
#	interface = eth0
#	clients = per_socket_clients

	limit {

	}
}

# IPv6 versions of the above - read their full config to understand options
listen {
	type = auth
	ipv6addr = ::	# any.  ::1 == localhost
	port = 0
	limit {
	      max_connections = 16
	      lifetime = 0
	      idle_timeout = 30
	}
}

listen {
	ipv6addr = ::
	port = 0
	type = acct

	limit {
	}
}

authorize {
	
	filter_username

	preprocess

	chap

	mschap

	digest

	suffix

	eap {
		ok = return
#		updated = return
	}

	files

	-ldap

	expiration
	logintime

	pap

}


authenticate {
	Auth-Type PAP {
		pap
	}

	Auth-Type CHAP {
		chap
	}

	Auth-Type MS-CHAP {
		mschap
	}

	mschap

	digest

	eap

}

preacct {
	preprocess

	acct_unique

	suffix
	files
}

accounting {
	
	detail
	unix

	#  Return an address to the IP Pool when we see a stop record.
	main_pool

	exec

	attr_filter.accounting_response

}


session {
}

post-auth {
	
	if (session-state:User-Name && reply:User-Name && request:User-Name && (reply:User-Name == request:User-Name)) {
		update reply {
			&User-Name !* ANY
		}
	}
	update {
		&reply: += &session-state:
	}

	#  Get an address from the IP Pool.
	main_pool

	exec

	remove_reply_message_if_eap

	Post-Auth-Type REJECT {
		attr_filter.access_reject

		eap

		remove_reply_message_if_eap
	}

	Post-Auth-Type Challenge {
	}

}

pre-proxy {
	
}

post-proxy {

	eap
}
}
