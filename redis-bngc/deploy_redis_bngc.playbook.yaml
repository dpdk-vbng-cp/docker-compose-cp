---
- hosts: all
  tasks:
  # - name: add Docker’s official GPG key and adding the apt repo
  #   become: yes
  #   apt_key:
  #     url: https://download.docker.com/linux/ubuntu/gpg
  #     state: present

  # - name: add official docker repository for bionic to apt sources
  #   become: yes
  #   apt_repository:
  #     repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable

  # - name: update apt cache and install required packages (including docker)
  #   become: yes
  #   apt:
  #     update_cache: yes
  #     name:
  #     - apt-transport-https
  #     - ca-certificates
  #     - curl
  #     - gnupg-agent
  #     - software-properties-common
  #     - virtualenv
  #     - python3-setuptools
  #     - aptitude
  #     - docker-ce
  #     - docker-ce-cli
  #     - containerd.io
  #     - python3-pip
  #     - bridge-utils
  #     - linux-headers-generic
  #     - build-essential

  # - name: download and add docker-compose from github to /usr/bin
  #   become: yes
  #   get_url:
  #     url: https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64
  #     dest: /usr/bin/docker-compose
  #     mode: 0755

  # - name: install docker and docker-compose python modules
  #   pip:
  #     name:
  #       - docker-compose
  #       - docker
  #     executable: pip3

  # - name: "add the user {{ ansible_user_id }} to the group 'docker'"
  #   become: yes
  #   user:
  #     name: "{{ ansible_user_id }}"
  #     groups: docker
  #     append: yes
  #   register: docker_user_add

  # - name: Reset ssh connection to allow user changes to affect 'current login user'
  #   meta: reset_connection
  #   when: docker_user_add changed





  # - name: "clean up directories {{ repo_clone_target }} and {{ repo_cp_copy }}"
  #   become: yes
  #   file:
  #     path: "{{ item }}"
  #     state: absent
  #   with_items:
  #     - "{{ repo_clone_target }}"
  #     - "{{ repo_cp_copy }}"
  #   when: run_mode == "clean_deploy"

  # - name: Replace a localhost entry with our own
  #   become: yes
  #   lineinfile:
  #     path: /etc/hosts
  #     regexp: 'redis.container.local$'
  #     line: "{{ ansible_default_ipv4.address }} redis.container.local"
  #     owner: root
  #     group: root
  #     mode: '0644'

  - name: Create bng_cp folder for redis/bngc files
    become: yes
    file:
      path: "/etc/bng_cp/"
      state: directory
      mode: '0755'

  - name: "copy redis.conf to /etc/bng_cp/redis.conf in host"
    become: yes
    copy:
      src: "redis.conf"
      dest: "/etc/bng_cp/"
      force: yes

  - name: "generate bngc.json config for PFCP control plane application"
    become: yes
    template:
      src: bngc.j2
      dest: "/etc/bng_cp/bngc.json"
    vars:
      bngc_ip: "{{ ansible_default_ipv4.address }}"

  # - name: "copy docker-compose.yml to /etc/bng_cp/docker-compose.yml in host"
  #   become: yes
  #   copy:
  #     src: "docker-compose.yml"
  #     dest: "/etc/bng_cp"
  #     force: yes

  - name: "stop and remove redis docker container for bngc control plane"
    #become: yes
    docker_container:
      state: absent
      name: redis
    when: run_mode == "clean_deploy"

  - name: "start containerized redis with docker for all control plane"
    #become: yes
    docker_container:
      name: redis
      image: "redis:alpine"
      command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
      state: started
      volumes:
        - /etc/bng_cp/redis.conf:/usr/local/etc/redis/redis.conf

  # - name: "start containerized control plane with docker-compose"
  #   become: yes
  #   docker_compose:
  #     project_src: "/etc/bng_cp/"
  #     nocache: yes
  #     dependencies: no

