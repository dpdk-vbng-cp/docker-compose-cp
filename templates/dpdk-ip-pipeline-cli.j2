#!/usr/bin/env python3

import sys
import json
import socket
import telnetlib
import traceback
import argparse
import redis
from timeit import default_timer as timer

CONFIG = dict()
CONFIG['debug'] = False
CONFIG['redis_host'] = '127.0.0.1'
CONFIG['redis_port'] = 6379
CONFIG['redis_channel'] = 'accel-ppp'
CONFIG['telnet_host_uplink'] = '127.0.0.1'
CONFIG['telnet_port_uplink'] = 8086
CONFIG['telnet_host_downlink'] = '127.0.0.1'
CONFIG['telnet_port_downlink'] = 8087
gateway_address= "{{ gateway_address }}"
up_pipe_out_src= "{{ up_pipe_out_src }}"
up_gateway_ip= "{{ up_gateway_ip }}"

def handle_message(d, telnet_sessions):
    # calling_station_id is ppp client
    # called_station_id is the pipeline/accel-ppp
    #print(d['event'])
    #if d['event'] == 'session-starting':
    #    print('Event: session-starting')
    if d['event'] == 'session-acct-start':
        print('Event: session-acct-start')
        send_uplink_message(d, telnet_sessions)
        send_downlink_message(d, telnet_sessions)
    elif d['event'] == 'session-pre-finished':
       print("Event: PPPOE - Remove Session and all the associated rules")
       send_uplink_rule_delete(d, telnet_sessions)
       send_downlink_rule_delete(d, telnet_sessions)


def send_routing_rule_for_4k (telnet_sessions):
    print("############################################ 1 rule for 4k ####################################################################")
    direction = 'uplink'
    command = f'pipeline upstream|routing table 0 rule add match lpm ipv4 {up_gateway_ip} 32 action fwd port 0 encap ether {gateway_address} {up_pipe_out_src}'
    send_telnet_command(direction, command, telnet_sessions)
    return

def send_uplink_message(d, telnet_sessions):
    #start = timer()
    print("############################################ UPSTREAM ####################################################################")
    direction = 'uplink'
    ctrl_ifname = d['ctrl_ifname']
    tags = ctrl_ifname.split(".")
    if len(tags) != 3:
        print("Error: the interface name is not as expected. e.g. eth1.0.37")
        return
    s_tag, c_tag = tags[1], tags[2]
    command = f'pipeline upstream|firewall table 0 rule add match acl priority 0 ipv4 {d["ip_addr"]} 32 0.0.0.0 0 0 65535 0 65535 17 action fwd port 0'
    print (d["ip_addr"])
    send_telnet_command(direction, command, telnet_sessions)
    command = f'pipeline upstream|flow_clac table 0 rule add match hash qinq {s_tag} {c_tag} action fwd port 0 meter tc0 meter 0 policer g g y y r r'
    send_telnet_command(direction, command, telnet_sessions)
    command = f'pipeline upstream|routing table 0 rule add match lpm ipv4 {up_gateway_ip} 32 action fwd port 0 encap ether {gateway_address} {up_pipe_out_src}'
    send_telnet_command(direction, command, telnet_sessions)
    
    #end = timer()
    #print("recorded time for writing upstream rules:")
    #print (end-start)
    print (d["calling_station_id"])
    print (up_pipe_out_src)
    
def send_downlink_message(d, telnet_sessions):
    print("############################################ DOWNSTREAM ####################################################################")
    #start = timer()
    direction = 'downlink'
    ctrl_ifname = d['ctrl_ifname']
    tags = ctrl_ifname.split(".")
    if len(tags) != 3:
        print("Error: the interface name is not as expected. e.g. eth1.0.37")
        return
    s_tag, c_tag = tags[1], tags[2]
    command = f'pipeline downstream|firewall table 0 rule add match acl priority 0 ipv4 0.0.0.0 0 {d["ip_addr"]} 32 0 65535 0 65535 17 action fwd port 0'
    send_telnet_command(direction, command, telnet_sessions)
    last = d["ip_addr"].split(".")[3]
    command = f'pipeline downstream|hqos table 0 rule add match lpm ipv4 {d["ip_addr"]} 32 action fwd port 0 tm subport 0 pipe {last}'
    send_telnet_command(direction, command, telnet_sessions)
    command = f'pipeline downstream|routing table 0 rule add match lpm ipv4 {d["ip_addr"]} 32 action fwd port 0 encap qinq_pppoe {d["calling_station_id"]} {d["called_station_id"]} 7 0 {s_tag} 7 0 {c_tag} {d["pppoe_sessionid"]}'
    send_telnet_command(direction, command, telnet_sessions)
    
    #end = timer()
    #print("recorded time for writing downstream rules:")
    #print (end-start)
    print (d["calling_station_id"])
    print (d["called_station_id"])

def send_uplink_rule_delete(d, telnet_sessions):
    print("############################################ UPSTREAM ####################################################################")
    #start = timer()
    direction = 'uplink'
    ctrl_ifname = d['ctrl_ifname']
    tags = ctrl_ifname.split(".")
    if len(tags) != 3:
        print("Error: the interface name is not as expected. e.g. eth1.0.37")
        return
    s_tag, c_tag = tags[1], tags[2]
    command = f'pipeline upstream|firewall table 0 rule delete match acl priority 0 ipv4 {d["ip_addr"]} 32 0.0.0.0 0 0 65535 0 65535 17'
    send_telnet_command(direction, command, telnet_sessions)
    command = f'pipeline upstream|flow_clac table 0 rule delete match hash qinq {s_tag} {c_tag}'
    send_telnet_command(direction, command, telnet_sessions)
    command = f'pipeline upstream|routing table 0 rule delete match lpm ipv4 {up_gateway_ip} 32'
    send_telnet_command(direction, command, telnet_sessions)

    #end = timer()
    #print("recorded time for deleting upstream rules:")
    #print (end-start)


def send_downlink_rule_delete(d, telnet_sessions):
    print("############################################ DOWNSTREAM ####################################################################")
    #start = timer()
    direction = 'downlink'
    command = f'pipeline downstream|firewall table 0 rule delete match acl priority 0 ipv4 0.0.0.0 0 {d["ip_addr"]} 32 0 65535 0 65535 17'
    send_telnet_command(direction, command, telnet_sessions)
    last = d["ip_addr"].split(".")[3]
    command = f'pipeline downstream|hqos table 0 rule delete match lpm ipv4 {d["ip_addr"]} 32'
    send_telnet_command(direction, command, telnet_sessions)
    command = f'pipeline downstream|routing table 0 rule delete match lpm ipv4 {d["ip_addr"]} 32'
    send_telnet_command(direction, command, telnet_sessions)

    #end = timer()
    #print("recorded time for deleting downstream rules:")
    #print (end-start)


def send_telnet_command(direction, command, telnet_sessions):
    command = command + "\n"
    command = command.encode('ascii')
    prompt = b">"
    print(f'Sending to {direction} the command {command}')
    #print(f'{telnet_sessions}')
    tn = telnet_sessions[direction]
    #print(tn.read_until(prompt))
    tn.write(command)
    print(tn.read_until(prompt))
    return

def create_telnet_sessions(tn={'uplink':None, 'downlink':None}):
    """Creates two instances of telnet, one for each direction, 'uplink' and 'downlink'
    returns a dictionary containing the two instances.
    """
    prompt = b">"
    tn_uplink = telnetlib.Telnet()
    tn_uplink.open(CONFIG['telnet_host_uplink'], CONFIG['telnet_port_uplink'])
    print(tn_uplink.read_until(prompt))
    #send_routing_rule_for_4k ('uplink')
    tn_downlink = telnetlib.Telnet()
    tn_downlink.open(CONFIG['telnet_host_downlink'], CONFIG['telnet_port_downlink'])
    print(tn_downlink.read_until(prompt))
    return {'uplink': tn_uplink, 'downlink': tn_downlink}

def main():
    """ """
    parser = argparse.ArgumentParser(description="A little bit of glue for connecting accel-ppp and DPDK's ip-pipeline.")
    parser.add_argument('--debug', help='enable debug information (default={})'.format(CONFIG['debug']), dest='debug', action='store_true')
    parser.add_argument('--redis-host', help='redis host (default={})'.format(CONFIG['redis_host']), action='store', default=CONFIG['redis_host'], type=str)
    parser.add_argument('--redis-port', help='redis port (default={})'.format(CONFIG['redis_port']), action='store', default=CONFIG['redis_port'], type=int)
    parser.add_argument('--redis-channel', help='redis channel (default={})'.format(CONFIG['redis_channel']), action='store', default=CONFIG['redis_channel'], type=str)
    parser.add_argument('--telnet-host-uplink', help='telnet host uplink (default={})'.format(CONFIG['telnet_host_uplink']), action='store', default=CONFIG['telnet_host_uplink'], type=str)
    parser.add_argument('--telnet-port-uplink', help='telnet port uplink (default={})'.format(CONFIG['telnet_port_uplink']), action='store', default=CONFIG['telnet_port_uplink'], type=int)
    parser.add_argument('--telnet-host-downlink', help='telnet host downlink (default={})'.format(CONFIG['telnet_host_downlink']), action='store', default=CONFIG['telnet_host_downlink'], type=str)
    parser.add_argument('--telnet-port-downlink', help='telnet port downlink (default={})'.format(CONFIG['telnet_port_downlink']), action='store', default=CONFIG['telnet_port_downlink'], type=int)
    p = parser.parse_args(sys.argv[1:])

    CONFIG['debug'] = p.debug
    CONFIG['redis_host'] = p.redis_host
    CONFIG['redis_port'] = p.redis_port
    CONFIG['redis_channel'] = p.redis_channel
    CONFIG['telnet_host_uplink'] = p.telnet_host_uplink
    CONFIG['telnet_port_uplink'] = p.telnet_port_uplink
    CONFIG['telnet_host_downlink'] = p.telnet_host_downlink
    CONFIG['telnet_port_downlink'] = p.telnet_port_downlink

    # redis
    #
    redis_client = redis.StrictRedis(host=CONFIG['redis_host'], port=CONFIG['redis_port'], db=0)
    redis_sub = redis_client.pubsub()

    redis_sub.subscribe(CONFIG['redis_channel'])

    #tn = dict()
    #for direction in ('uplink', 'downlink', ):
    #    try:
    #        tn[direction] = telnetlib.Telnet(CONFIG['telnet_host_{}'.format(direction)], CONFIG['telnet_port_{}'.format(direction)])
    #    except socket.error as e:
    #        traceback.print_exc()

    # Establish two telnet sessions, one for each direction, and pass them on to all functions.
    telnet_sessions = create_telnet_sessions()
    keep_running = True
    while keep_running:
        try:
            for item in redis_sub.listen():

                s = item.get('data', {})
                if isinstance(s, bytes):
                    s = s.decode('utf8').replace("'", '"')
                    try:
                        d = json.loads(s)
                        #print (d)
                        handle_message(d, telnet_sessions)
                    except ValueError as e:
                        if CONFIG['debug']:
                            traceback.print_exc()

                # do something with the dictionary d, e.g., talk to the telnet server reachable via tn
                # example:
                # {u'username': u'52:54:00:8e:1d:2c',
                #  u'calling_station_id': u'52:54:00:8e:1d:2c',
                #  u'called_station_id': u'acbridge',
                #  u'ip_addr': u'172.18.10.12',
                #  u'name': u'ipoe',
                #  u'session_id': u'e2a53300dd5b30b2',
                #  u'ctrl_type': u'ipoe',
                #  u'channel_name': u'52:54:00:8e:1d:2c',
                #  u'event': u'session-acct-start'}

        except KeyboardInterrupt as e:
            print("done.")
            keep_running = False
        except:
            if CONFIG['debug']:
                traceback.print_exc()
            raise


if __name__ == "__main__":

    main()
